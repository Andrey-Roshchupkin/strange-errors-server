// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "ISC",
            "url": "https://opensource.org/licenses/ISC"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/article": {
            "post": {
                "description": "Creates a new article in the database. ID is generated by the server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "articles"
                ],
                "summary": "Create a new article",
                "parameters": [
                    {
                        "description": "Article data (title and content only)",
                        "name": "article",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateArticleRequest"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "888": {
                        "description": "Article created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "999": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/article/{id}": {
            "delete": {
                "description": "Deletes an article by ID from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "articles"
                ],
                "summary": "Delete an article",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "666": {
                        "description": "Article not found",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/articles": {
            "get": {
                "description": "Retrieves all articles from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "articles"
                ],
                "summary": "Get all articles",
                "responses": {
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "777": {
                        "description": "Articles retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/health-check": {
            "get": {
                "description": "Performs a regular health check of the server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Server is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Demonstrates progressive server behavior with a custom GOAT HTTP method. Use: curl -X GOAT http://localhost:3000/api/health-check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "GOAT method (Custom HTTP Method)",
                "responses": {
                    "200": {
                        "description": "First call - Happy GOAT",
                        "schema": {
                            "$ref": "#/definitions/models.GoatResponse"
                        }
                    },
                    "400": {
                        "description": "Second/Third call - Annoyed/Upset GOAT",
                        "schema": {
                            "$ref": "#/definitions/models.GoatResponse"
                        }
                    },
                    "500": {
                        "description": "Fourth call - Enraged GOAT",
                        "schema": {
                            "$ref": "#/definitions/models.GoatResponse"
                        }
                    },
                    "503": {
                        "description": "Fifth call - Fatal GOAT",
                        "schema": {
                            "$ref": "#/definitions/models.GoatResponse"
                        }
                    }
                }
            }
        },
        "/api/user": {
            "post": {
                "description": "Creates a new user if the name doesn't already exist. This demonstrates idempotent POST behavior - calling multiple times with the same name will return an error instead of creating duplicates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user (Idempotent POST)",
                "parameters": [
                    {
                        "description": "User data (name and email)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "User already exists or invalid data",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (wrong status for invalid email)",
                        "schema": {
                            "$ref": "#/definitions/models.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Article"
                    }
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Article": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.CreateArticleRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.GoatResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Article management operations",
            "name": "articles"
        },
        {
            "description": "User management operations",
            "name": "users"
        },
        {
            "description": "Health check and GOAT method operations",
            "name": "health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Strange Errors Server API",
	Description:      "A demonstration server for \"The Absence of Errors Double Fallacy\" article, showcasing various error handling fallacies and custom HTTP methods.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
