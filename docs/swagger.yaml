basePath: /
definitions:
  models.APIResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Article'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  models.Article:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  models.CreateArticleRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  models.GoatResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A demonstration server for "The Absence of Errors Double Fallacy" article,
    showcasing various error handling fallacies and custom HTTP methods.
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC
  termsOfService: http://swagger.io/terms/
  title: Strange Errors Server API
  version: "1.0"
paths:
  /api/article:
    post:
      consumes:
      - application/json
      description: Creates a new article in the database. ID is generated by the server.
      parameters:
      - description: Article data (title and content only)
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/models.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "500":
          description: Database error
          schema:
            type: string
        "888":
          description: Article created successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "999":
          description: Invalid request data
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new article
      tags:
      - articles
  /api/article/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an article by ID from the database.
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Article deleted successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/models.APIResponse'
        "666":
          description: Article not found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete an article
      tags:
      - articles
  /api/articles:
    get:
      consumes:
      - application/json
      description: Retrieves all articles from the database.
      produces:
      - application/json
      responses:
        "500":
          description: Database error
          schema:
            type: string
        "777":
          description: Articles retrieved successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all articles
      tags:
      - articles
  /api/health-check:
    get:
      consumes:
      - application/json
      description: Performs a regular health check of the server
      produces:
      - application/json
      responses:
        "200":
          description: Server is healthy
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
    post:
      consumes:
      - application/json
      description: 'Demonstrates progressive server behavior with a custom GOAT HTTP
        method. Use: curl -X GOAT http://localhost:3000/api/health-check'
      produces:
      - application/json
      responses:
        "200":
          description: First call - Happy GOAT
          schema:
            $ref: '#/definitions/models.GoatResponse'
        "400":
          description: Second/Third call - Annoyed/Upset GOAT
          schema:
            $ref: '#/definitions/models.GoatResponse'
        "500":
          description: Fourth call - Enraged GOAT
          schema:
            $ref: '#/definitions/models.GoatResponse'
        "503":
          description: Fifth call - Fatal GOAT
          schema:
            $ref: '#/definitions/models.GoatResponse'
      summary: GOAT method (Custom HTTP Method)
      tags:
      - health
  /api/user:
    post:
      consumes:
      - application/json
      description: Creates a new user if the name doesn't already exist. This demonstrates
        idempotent POST behavior - calling multiple times with the same name will
        return an error instead of creating duplicates.
      parameters:
      - description: User data (name and email)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: User already exists or invalid data
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error (wrong status for invalid email)
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new user (Idempotent POST)
      tags:
      - users
schemes:
- http
swagger: "2.0"
tags:
- description: Article management operations
  name: articles
- description: User management operations
  name: users
- description: Health check and GOAT method operations
  name: health
